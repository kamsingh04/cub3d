Here's a step-by-step explanation of findHorizontalIntersection:

Initialize ray position and direction: The function takes the player's position 
(rayPosX and rayPosY) and the ray angle (rayAngle) as input. It calculates
the ray direction (rayDirX and rayDirY) using the cosine and sine of the ray angle.
Calculate initial position on the nearest horizontal grid line: The function 
calculates the initial position of the ray on the nearest horizontal grid line 
by flooring the player's y-coordinate to the nearest multiple of TILE_SIZE.
Determine step direction: The function determines the direction to step in x 
and y (either -1, 0, or 1) based on the ray direction.
Calculate step sizes: The function calculates the step sizes in x and y (deltaX 
and deltaY) based on the ray direction and TILE_SIZE.
Raycasting loop: The function enters a loop that continues until the ray 
intersects with a wall or reaches the edge of the map. In each iteration, it:
Checks if the ray has hit a wall block by checking the value of the map at 
the current position.
If a wall is hit, it calculates and returns the distance from the player to 
the point of intersection using the hypot function.
If no wall is hit, it moves to the next horizontal intersection by adding 
deltaX to nextX and stepY * deltaY to nextY.
Return a large number if no intersection is found: If the loop completes 
without finding an intersection, the function returns a large number (1e30) 
to indicate that no wall was hit.
raycast function

This function is responsible for rendering the scene by casting rays for 
each pixel on the screen.

Initialize ray angle and increment: The function takes the player's angle
and field of view (player.fov) as input and calculates the initial ray angle
 and increment (angleIncrement) for each pixel.
Loop through each pixel on the screen: The function loops through each pixel 
on the screen (from 0 to screenWidth - 1).
Cast rays and find intersections: For each pixel, the function calls 
findHorizontalIntersection and findVerticalIntersection to find the distances
 to the nearest wall intersections in the horizontal and vertical directions, respectively.
Calculate minimum distance: The function calculates the minimum distance 
between the two intersections using the ternary operator.
Render the pixel: The function calls the render function to render the 
pixel at the current x-coordinate with the calculated distance.
Increment the ray angle: The function increments the ray angle by
angleIncrement for the next pixel.